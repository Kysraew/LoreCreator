// <auto-generated />
using LoreCreatorBackend.Infrastrucure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LoreCreatorBackend.Migrations
{
    [DbContext(typeof(LoreDbContext))]
    [Migration("20250706151539_UpdatedEntityWorldType")]
    partial class UpdatedEntityWorldType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EntityEntity", b =>
                {
                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<int>("RelatedEntitiesId")
                        .HasColumnType("integer");

                    b.HasKey("EntityId", "RelatedEntitiesId");

                    b.HasIndex("RelatedEntitiesId");

                    b.ToTable("EntityEntity");
                });

            modelBuilder.Entity("LoreCreatorBackend.Models.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("WorldId");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("LoreCreatorBackend.Models.EntityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EntityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Person"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Place"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Object"
                        });
                });

            modelBuilder.Entity("LoreCreatorBackend.Models.World", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Worlds");
                });

            modelBuilder.Entity("EntityEntity", b =>
                {
                    b.HasOne("LoreCreatorBackend.Models.Entity", null)
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoreCreatorBackend.Models.Entity", null)
                        .WithMany()
                        .HasForeignKey("RelatedEntitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoreCreatorBackend.Models.Entity", b =>
                {
                    b.HasOne("LoreCreatorBackend.Models.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LoreCreatorBackend.Models.World", "World")
                        .WithMany()
                        .HasForeignKey("WorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityType");

                    b.Navigation("World");
                });
#pragma warning restore 612, 618
        }
    }
}
